title: "Yoda Ner"
description: ""
spacy_version: "3.4.0"

# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  name: "yoda_ner"
  lang: "es"
  pipeline: "es_dep_news_trf"

  # Custom data
  data: "assets/features.csv"

  # JSON data
  train: "assets/train.json"
  val: "assets/val.json"

  # Spacy
  sp_train: "corpus/train.spacy"
  sp_val: "corpus/val.spacy"

  # Config
  base_config: "configs/base_config.cfg"
  config: "configs/config.cfg"

  # Split
  train_split: 0.7

  # Train parameters
  train_out: "out"
  eval_freq: 10
  epochs: 1000
  patience: 50
  model: "out/model-best"

  # Metrics
  metrics: "out/metrics.json"
  view_example: "Chaqueta Salomon DrifterLoft Hoodie Hombre M Azul y Verde"

  version: "0.0.2"
  # Set your GPU ID, -1 is CPU
  gpu_id: 0

directories: ["assets", "corpus", "configs", "scripts", "notebooks"]

assets:
  - dest: "${vars.train}"
    description: "Training data converted with convert data script in src folder"
  - dest: "${vars.val}"
    description: "Validation data converted with convert data script in src folder"

# Workflows. You can run them via "spacy project run [workflow]"
workflows:
  all:
    - split
    - convert
    - create-config
    - train
    - evaluate
    - package
    - view

commands:
  - name: "split"
    help: "Convert from custom data to train and val data"
    script:
      - "python scripts/split_data.py ${vars.data} ${vars.train} ${vars.val} ${vars.train_split}"
    deps:
      - "${vars.data}"
      - "scripts/split_data.py"
    outputs:
      - "${vars.train}"
      - "${vars.val}"

  - name: "convert"
    help: "Convert the data to spaCy's binary format"
    script:
      - "python scripts/convert.py ${vars.lang} ${vars.train} ${vars.sp_train}"
      - "python scripts/convert.py ${vars.lang} ${vars.val} ${vars.sp_val}"
    deps:
      - "${vars.train}"
      - "${vars.val}"
      - "scripts/convert.py"
    outputs:
      - "${vars.sp_train}"
      - "${vars.sp_val}"

  - name: "create-config"
    help: "Create a config for training"
    script:
      - "python -m spacy init fill-config ${vars.base_config} ${vars.config}"
    deps:
      - ${vars.base_config}
    outputs:
      - "${vars.config}"

  - name: "train"
    help: "Train the NER model"
    script:
      - "python -m spacy train ${vars.config} --output ${vars.train_out} --paths.dev ${vars.sp_val} --paths.train ${vars.sp_train} --training.eval_frequency ${vars.eval_freq} --training.max_steps ${vars.epochs} --training.patience ${vars.patience} --gpu-id ${vars.gpu_id}"
    deps:
      - "${vars.config}"
      - "${vars.train}"
      - "${vars.val}"
    outputs:
      - "${vars.model}"

  - name: evaluate
    help: "Evaluate the model and export metrics"
    script:
      - "python -m spacy evaluate ${vars.model} ${vars.sp_val} --output ${vars.metrics} --gpu-id ${vars.gpu_id}"
    deps:
      - "${vars.model}"
      - "${vars.val}"
    outputs:
      - "${vars.metrics}"

  - name: package
    help: "Package the trained model as a pip package"
    script:
      - "python -m spacy package ${vars.model} packages --name ${vars.name} --version ${vars.version} --force"
    deps:
      - "${vars.model}"
    outputs_no_cache:
      - "packages/${vars.lang}_${vars.name}-${vars.version}/dist/${vars.lang}_${vars.name}-${vars.version}.tar.gz"

  - name: view
    help: Visualize the model's output interactively using Streamlit
    script:
      - 'streamlit run scripts/visualize_model.py ${vars.model} "${vars.view_example}"'
    deps:
      - "scripts/visualize_model.py"
      - "${vars.model}"
